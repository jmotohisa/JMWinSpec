# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""JM speutils package"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _speutils
else:
    import _speutils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def pyspeconvert(wl_dest, spectrum_dest, flg, fname, start, end, resolution, dont_normalize_exp_sec):
    r"""pyspeconvert(double * wl_dest, double * spectrum_dest, int * flg, char * fname, double start, double end, double resolution, int dont_normalize_exp_sec)"""
    return _speutils.pyspeconvert(wl_dest, spectrum_dest, flg, fname, start, end, resolution, dont_normalize_exp_sec)

def pyspeconvert0(spectrum, coef, wl_dest, spectrum_dest, flg, start, end, resolution):
    r"""pyspeconvert0(double * spectrum, double * coef, double * wl_dest, double * spectrum_dest, int * flg, double start, double end, double resolution) -> int"""
    return _speutils.pyspeconvert0(spectrum, coef, wl_dest, spectrum_dest, flg, start, end, resolution)

def pyspeglue2(wl_dest, spectrum1_dest, flg1_dest, spectrum2_dest, flg2_dest, spectrum_2glued, flg_2glued, edge_processing_mode):
    r"""pyspeglue2(double * wl_dest, double * spectrum1_dest, int * flg1_dest, double * spectrum2_dest, int * flg2_dest, double * spectrum_2glued, int * flg_2glued, int edge_processing_mode)"""
    return _speutils.pyspeglue2(wl_dest, spectrum1_dest, flg1_dest, spectrum2_dest, flg2_dest, spectrum_2glued, flg_2glued, edge_processing_mode)

from .readspe import (
		     readspe,
		     checkspecalib,
		     readspecomments,
		     printspespan,
		     writespectrum_csv,
		     )
from .glueprocs import (
		       glue2spe,
		       gluespe1,
		       gluemultiplespe,
		       )


__version__ = ''
